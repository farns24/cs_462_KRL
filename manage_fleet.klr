ruleset manage_fleet {
  meta {
    use module Subscriptions
    use module io.picolabs.pico alias wrangler
    name "Fleet Manager"
    description <<
A first ruleset for the Quickstart
>>
    author "Michael Farnsworth"
    logging on
    provides children, vehicles, myself,trips
    shares vehicles, children, myself,trips
  }
  
  global {
     

    cloud_url = "http://localhost:8080/sky/cloud/";
 
cloud = function(eci, mod, func, params) {
     http:get("http://localhost:8080/sky/cloud/" +eci+ "/"+ mod +"/" + func)["content"].decode();
   }
    parent = function(){
      ent:parent.defaultsTo({})
    }

    vehicles = function() {
        Subscriptions:getSubscriptions() 
    }

    myself = function() {
        wrangler:myself()
    }
    
    children = function() {
        wrangler:children()
    }
    
    trips = function() {
         response = [];
         vehicles().map(function(v,k){
         res =cloud(v{"attributes"}{"subscriber_eci"},"trip_store","trips",{}).klog(res);
         response.append([res]);
            });


    response
    }
    
  }

  rule request_report {
  select when fleet request_report
  pre {
   past5 = ent:past5.defaultsTo([{},{},{},{},{}]);
   past5 = past5.tail();
   col = ent:collected.defaultsTo({});
   past5 = past5.append([col])
  }
  always {
        fleet_count =  vehicles().length();
        ent:collected := {"fleet":{}, "Vehicles": fleet_count, "Responding": 0 };


        raise fleet event "build_report" 
        attributes event:attrs();
         ent:past5 := past5;
    }

   }

  rule build_report{
  select when fleet build_report
      foreach vehicles() setting(v,k)
       event:send({ "eci":v{"attributes"}{"subscriber_eci"} , "eid": 1313,
                 "domain": "car", "type": "build_report",
                  "attrs": {"parent" : myself(){"eci"}}
                  })
       always{
          schedule fleet event "report_complete" at time:add(time:now(), {"seconds": 5})
       }
      
  }
  
  rule collect_report {
      select when fleet collect_report
      pre{
        fleet_count =  vehicles().length();
        collected = ent:collected.defaultsTo({"fleet":{}, "Vehicles": fleet_count, "Responding": 0 });
        responded = collected{"fleet"};
        responded{event:attr("node")} = event:attr("trips");
        collected{"Responding"} = responded.keys().length();
        collected{"fleet"} = responded;
      }
      
      always{
          ent:collected := collected;

          raise fleet event "report_complete"
          attributes {"report" : collected.encode()} if (responded.keys().length() ==fleet_count); 
      
        
      }
   }
   
  rule report_complete
  {
      select when fleet report_complete
      send_directive("say") with
         something = ent:collected.encode()

  }

  rule create_vehicle {
    select when car new_vehicle

    pre {
       vid = ent:vId.defaultsTo(0);
       random_name = "Vehicle_" +  vid;
       name  = random_name;
    }
    
    always{ 
       raise pico event "new_child_request";

          }

  }


   rule subscribe_me{
     select when fleet Subscribe
    always{
      c = children().klog(c);
       last = c[c.length()-1];
           raise wrangler event "subscription"
              attributes {
                "name" : "V "+ c.length(),
                "name_space" :"fleet subscription",
                "my_role" :"fleet",
                "subscriber_role" :"vehicle",
                "channel_type" :"subscription",
               "subscriber_eci" : last{"eci"}};
           
    
           ent:vId := vid +1;
           myAttr = {"cid":last{"eci"}};
       
           raise pico event "ruleset_added" 
               attributes  {"rid" : "track_trips",
                             "base": last{"eci"}};
       }
   }

  
  rule delete_vehicle {
    select when car unneeded_vehicle
     
     always{
      
        raise pico  event "delete_child_request"
        attributes event:attrs();
     }
     

    }

 }
