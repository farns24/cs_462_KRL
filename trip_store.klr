ruleset trip_store {
  meta {
    name "Trip Store"
    author "Michael Farnsworth"
    description "storetrips"
    logging on
    sharing on
    provides trips, long_trips, short_trips
  }
  
  global {
    hello = function(obj) {
      msg = "Hello " + obj;
      msg
    }
    long_trip = 1000
    
    trips = function() {
      ent:trips
    }
    
    long_trips = function() {
      ent:long_trips
    }
    
    short_trips = function() {
      trips = ent:trips;
      shor = {};
      trips.filter(function(v,k){v < long_trip}).map(function(v,k) {
         shor.put(k,v);
         });
      //shor
    }
  }
  
 rule get_trips {
   select when car get_trips
     pre {
        trips = trips()
     }
     fired {
        raise fleet event "collect_report" with 
                trips = trips.encode();
     }
 }

 
 rule collect_long_trips {
    select when explicit found_long_trip mileage re#(.*)# setting(m)
      pre {
          lt = ent:long_trips; 
      }
      fired{
      
       set ent:long_trips lt.put(time:now(),{"Mileage":m});
      }
  }
  
rule collect_trips {
  select when explicit trip_processed mileage re#(.*)# setting(m)
    pre {
       tps = ent:trips;
    }
    fired{

       set ent:trips tps.put(time:now(),{"Mileage":m});
      }
  }

  rule clear_trips {
    select when car trip_reset;
    always {
         set ent:trips {};
         set ent:long_trips {}
      }
  }
  
 }
